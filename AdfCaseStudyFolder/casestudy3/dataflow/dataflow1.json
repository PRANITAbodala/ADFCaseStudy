{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DelimitedText1",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "AzureSqlTable3",
						"type": "DatasetReference"
					},
					"name": "source2"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "AzureSqlTable4",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "lookup1"
				},
				{
					"name": "split1"
				},
				{
					"name": "AlterRow1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          EmployeeID as integer '000',",
				"          EmployeeName as string,",
				"          Gender as string,",
				"          Location as string,",
				"          Designation as string,",
				"          Salary as integer '000'",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source(output(",
				"          EmployeeID as integer,",
				"          EmployeeName as string,",
				"          Gender as string,",
				"          Location as string,",
				"          Designation as string,",
				"          Salary as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> source2",
				"source1, source2 lookup(source1@EmployeeID == source2@EmployeeID,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookup1",
				"lookup1 split(source1@EmployeeID == source2@EmployeeID && (     source1@EmployeeName != source2@EmployeeName ||     source1@Gender != source2@Gender ||     source1@Location != source2@Location ||     source1@Designation != source2@Designation ||     source1@Salary != source2@Salary ),",
				"     disjoint: false) ~> split1@(update, discard)",
				"split1@update alterRow() ~> AlterRow1",
				"AlterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          EmployeeID as integer,",
				"          EmployeeName as string,",
				"          Gender as string,",
				"          Location as string,",
				"          Designation as string,",
				"          Salary as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:true,",
				"     upsertable:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
			]
		}
	}
}